AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  shared-list

  Creates required resources for hosting a shared-list app.

Globals:
  Function:
    Timeout: 3

Resources:
  # BACKEND
  ListItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: shared-lists
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: list_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: individual-lists
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: list_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: shared-list/
      Handler: app.getItems
      Runtime: nodejs18.x
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ListItemsTable
      Architectures:
        - x86_64
      Events:
        GetItems:
          Type: Api
          Properties:
            Path: /shared-list
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts
  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: shared-list/
      Handler: app.createItem
      Runtime: nodejs18.x
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ListItemsTable
      Architectures:
        - x86_64
      Events:
        CreateItem:
          Type: Api
          Properties:
            Path: /shared-list
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts
  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: shared-list/
      Handler: app.deleteItem
      Runtime: nodejs18.x
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ListItemsTable
      Architectures:
        - x86_64
      Events:
        DeleteItem:
          Type: Api
          Properties:
            Path: /shared-list
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts
  # FRONTEND
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Serverless website OA"

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Sub: "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        DefaultCacheBehavior:
          Compress: "true"
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: shared-list

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
Outputs:
  SharedListApi:
    Description: "API Gateway endpoint URL for Prod stage for SharedList functions"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/shared-list/"
  GetItemsFunction:
    Description: "Get Items Lambda Function ARN"
    Value: !GetAtt GetItemsFunction.Arn
  GetItemsFunctionIamRole:
    Description: "Implicit IAM Role created for SharedList functions"
    Value: !GetAtt GetItemsFunctionRole.Arn
